package GeneralBonus

import Hashtable
import HashMap
import AbilityObjEditing

//==================================
// 万能属性系统
//==================================
/** 奖励类型为生命值 **/
public let BONUS_TYPE_MAX_LIFE = 0
/** 奖励类型为魔法值 **/
public let BONUS_TYPE_MAX_MANA = 1
/** 奖励类型为攻击力 **/
public let BONUS_TYPE_ATTACK = 2
/** 奖励类型为防御力 **/
public let BONUS_TYPE_ARMOR = 3
/** 奖励类型为攻击速度 **/
public let BONUS_TYPE_ATTACK_SPEED = 4

/** 增加属性模式 **/
public let MODE_ADD = 0
/** 减少属性模式 **/
public let MODE_SUBSTRACT = 1
/** 设置属性模式 **/
public let MODE_SET = 2

int array maxLifeBonusAbilityId
int array maxManaBonusAbilityId
int array attackBonusAbilityId
int array armorBonusAbilityId
int array attackSpeedBonusAbilityId

function int.getBonusArray() returns int array
    switch(this)
        case BONUS_TYPE_MAX_LIFE
            return maxLifeBonusAbilityId
        case BONUS_TYPE_MAX_MANA
            return maxManaBonusAbilityId
        case BONUS_TYPE_ATTACK
            return attackBonusAbilityId
        case BONUS_TYPE_ATTACK_SPEED
            return attackSpeedBonusAbilityId
        case BONUS_TYPE_ARMOR
            return armorBonusAbilityId
        default
            return maxLifeBonusAbilityId


let ht = InitHashtable()
function unit.clearBonus(int bonusType)
    for i = 0 to 30
        switch(bonusType)
            case BONUS_TYPE_MAX_LIFE
                this.removeAbility(maxLifeBonusAbilityId[i])
            case BONUS_TYPE_MAX_MANA
                this.removeAbility(maxManaBonusAbilityId[i])
            case BONUS_TYPE_ATTACK
                this.removeAbility(attackBonusAbilityId[i])
            case BONUS_TYPE_ATTACK_SPEED
                this.removeAbility(attackSpeedBonusAbilityId[i])
            case BONUS_TYPE_ARMOR
                this.removeAbility(armorBonusAbilityId[i])
    ht.saveInt(this.getHandleId(), bonusType, 0)

function unit.setMaxLifeOrMana(int bonusType, int value) returns bool
    if value > Pow(2, 30) or value <= 0
        Log.error("使用万能属性系统超出最大限，请联系作者")
        return false
    var v = value
    if bonusType == BONUS_TYPE_MAX_LIFE
        v -= this.getMaxHP().toInt()
    else if bonusType == BONUS_TYPE_MAX_MANA
        v -= this.getMaxMana().toInt()
    else
        Log.error("使用万能属性系统出现无效属性状态，请联系作者")
        return false
    ht.saveInt(this.getHandleId(), bonusType, v)
    var level = 3
    if v < 0
        level = 2
        v = -v
    if v == 0
        return false
    for i = 30 downto 0
        if v >= Pow(2, i.toReal())
            if bonusType == BONUS_TYPE_MAX_LIFE
                this..addAbility(maxLifeBonusAbilityId[i])..setAbilityLevel(maxLifeBonusAbilityId[i], level)..removeAbility(maxLifeBonusAbilityId[i])
            else if bonusType == BONUS_TYPE_MAX_MANA
                this..addAbility(maxManaBonusAbilityId[i])..setAbilityLevel(maxManaBonusAbilityId[i], level)..removeAbility(maxManaBonusAbilityId[i])
            v -= Pow(2, i.toReal()).toInt()
    return true

function unit.setAttackOrArmor(int bonusType, int value) returns bool
    if value == 0
        this.clearBonus(bonusType)
        return false
    if value > Pow(2, 30) or value <= 0
        Log.error("使用万能属性系统超出最大限，请联系作者")
        return false
    if bonusType != BONUS_TYPE_ATTACK and bonusType != BONUS_TYPE_ARMOR
        Log.error("使用万能属性系统出现无效属性状态，请联系作者")
        return false
    ht.saveInt(this.getHandleId(), bonusType, value)
    int maxBonusId = 0
    if bonusType == BONUS_TYPE_ATTACK
        maxBonusId = attackBonusAbilityId[30]
    else if bonusType == BONUS_TYPE_ARMOR
        maxBonusId = armorBonusAbilityId[30]
    var v = value
    if value < 0
        v += Pow(2, 30).toInt() + 1
        this..addAbility(maxBonusId)..makeAbilityPermanent(maxBonusId, true)
    else
        this.removeAbility(maxBonusId)
    for i = 29 downto 0
        if v >= Pow(2, i.toReal())
            if bonusType == BONUS_TYPE_ATTACK
                this..addAbility(attackBonusAbilityId[i])..makeAbilityPermanent(attackBonusAbilityId[i], true)
            else if bonusType == BONUS_TYPE_ARMOR
                this..addAbility(armorBonusAbilityId[i])..makeAbilityPermanent(armorBonusAbilityId[i], true)
            v -= Pow(2, i.toReal()).toInt()
        else
            if bonusType == BONUS_TYPE_ATTACK
                this.removeAbility(attackBonusAbilityId[i])
            else if bonusType == BONUS_TYPE_ARMOR
                this.removeAbility(armorBonusAbilityId[i])
    return true
function unit.setAttackSpeed(int value) returns bool
    if value == 0
        this.clearBonus(BONUS_TYPE_ATTACK_SPEED)
        return false
    if value > 0.01 * Pow(2, 30) or value <= 0
        Log.error("使用万能属性系统超出最大限，请联系作者")
        return false
    ht.saveInt(this.getHandleId(), BONUS_TYPE_ATTACK_SPEED, value)
    var v = value
    if value < 0
        v += (0.01 * (Pow(2, 30) + 1)).toInt()
        this..addAbility(attackSpeedBonusAbilityId[30])..makeAbilityPermanent(attackSpeedBonusAbilityId[30], true)
    else
        this.removeAbility(attackSpeedBonusAbilityId[30])
    for i = 29 downto 0
        if v >= 0.01 * Pow(2, i.toReal())
            this..addAbility(attackSpeedBonusAbilityId[i])..makeAbilityPermanent(attackSpeedBonusAbilityId[i], true)
            v -= (0.01 * Pow(2, i.toReal())).toInt()
        else
            this.removeAbility(attackSpeedBonusAbilityId[i])
    return true
        

public function unit.getGeneralBonus(int bonusType) returns int
    return ht.loadInt(this.getHandleId(), bonusType)

public function unit.addGeneralBonus(int bonusType, int amount)
    Log.debug("bonusType:" + bonusType.toString())
    Log.debug("amount:" + amount.toString())
    this.setGeneralBonus(bonusType, this.getGeneralBonus(bonusType) + amount)

public function unit.setGeneralBonus(int bonusType, int amount)
    switch(bonusType)
        case BONUS_TYPE_MAX_LIFE
            this.setMaxLifeOrMana(bonusType, amount)
        case BONUS_TYPE_MAX_MANA
            this.setMaxLifeOrMana(bonusType, amount)
        case BONUS_TYPE_ATTACK
            this.setAttackOrArmor(bonusType, amount)
        case BONUS_TYPE_ARMOR
            this.setAttackOrArmor(bonusType, amount)
        case BONUS_TYPE_ATTACK_SPEED
            this.setAttackSpeed(amount)

public function unit.setGeneralBonus(int bonusType, int mode, int amount)
    if mode == MODE_ADD
        this.addGeneralBonus(bonusType, amount)
    else if mode == MODE_SUBSTRACT
        this.addGeneralBonus(bonusType, -amount)
    else if mode == MODE_SET
        this.setGeneralBonus(bonusType, amount)

@compiletime function generateMaxLifeBonusObject()
    for i = 0 to 30
        var id = 1279406128 + i
        if i >= 10
            id += 7
        if not compiletime
            maxLifeBonusAbilityId[i] = id
        else
            new AbilityDefinitionMaxLifeBonusGreater(id)
                ..setLevels(3)
                ..setMaxLifeGained(2, Pow(2, i.toReal()).toInt())
                ..setMaxLifeGained(3, -Pow(2, i.toReal()).toInt())

@compiletime function generateMaxManaBonusObject()
    for i = 0 to 30
        var id = 1296183344 + i
        if i >= 10
            id += 7
        if not compiletime            
            maxManaBonusAbilityId[i] = id
        else
            new AbilityDefinitionMaxManaBonusMost(id)
                ..setLevels(3)
                ..setMaxManaGained(2, Pow(2, i.toReal()).toInt())
                ..setMaxManaGained(3, -Pow(2, i.toReal()).toInt())

@compiletime function generateAttackBonusObject()
    for i = 0 to 30
        var id = 1262628912 + i
        if i >= 10
            id += 7
        if not compiletime 
            attackBonusAbilityId[i] = id
        else
            new AbilityDefinitionAttackBonus(id)
                ..setLevels(3)
                ..setAttackBonus(2, Pow(2, i.toReal()).toInt()) 
                ..setAttackBonus(3, -Pow(2, i.toReal()).toInt()) 

@compiletime function generateArmorBonusObject()
    for i = 0 to 30
        var id = 1380069424 + i
        if i >= 10
            id += 7
        if not compiletime 
            armorBonusAbilityId[i] = id
        else
            new AbilityDefinitionDefenseBonusPlus1(id)
                ..setLevels(3)
                ..setDefenseBonus(2, Pow(2, i.toReal()).toInt()) 
                ..setDefenseBonus(3, -Pow(2, i.toReal()).toInt()) 

@compiletime function generateAttackSpeedBonusObject()
    for i = 0 to 30
        var id = 1396846640 + i
        if i >= 10
            id += 7
        if not compiletime 
            attackSpeedBonusAbilityId[i] = id
        else
            new AbilityDefinitionAttackSpeedIncrease(id)
                ..setLevels(3)
                ..setAttackSpeedIncrease(2, 0.01 * Pow(2, i.toReal())) 
                ..setAttackSpeedIncrease(3, -0.01 * Pow(2, i.toReal())) 

function initBonusArrays()
    generateMaxLifeBonusObject()
    generateMaxManaBonusObject()
    generateAttackBonusObject()
    generateArmorBonusObject()
    generateAttackSpeedBonusObject()

unit u = null
init
    initBonusArrays()

    /* test */
    CreateTrigger()
        ..registerPlayerChatEvent(players[0], "1234", true)
        ..addAction() ->
            u = createUnit(players[0], 'O023', vec2(-500, -200), bj_UNIT_FACING.asAngleDegrees())
            u.removeAbility('Avul')
            u.setGeneralBonus(BONUS_TYPE_ARMOR, MODE_ADD, 200)
            u.setGeneralBonus(BONUS_TYPE_MAX_LIFE, MODE_ADD, 20000)
            u.setGeneralBonus(BONUS_TYPE_MAX_MANA, MODE_ADD, 20000)
            u.setGeneralBonus(BONUS_TYPE_ATTACK, MODE_ADD, 20000)
            u.setGeneralBonus(BONUS_TYPE_ATTACK_SPEED, MODE_ADD, 20)
    CreateTrigger()
        ..registerPlayerChatEvent(players[0], "5678", true)
        ..addAction() ->
            Log.debug("最大生命值加成：" + u.getGeneralBonus(BONUS_TYPE_MAX_LIFE).toString())
            Log.debug("最大魔法值加成：" + u.getGeneralBonus(BONUS_TYPE_MAX_MANA).toString())
            Log.debug("最大攻击力加成：" + u.getGeneralBonus(BONUS_TYPE_ATTACK).toString())
            Log.debug("最大攻速加成：" + u.getGeneralBonus(BONUS_TYPE_ATTACK_SPEED).toString())
            Log.debug("最大护甲加成：" + u.getGeneralBonus(BONUS_TYPE_ARMOR).toString())
            